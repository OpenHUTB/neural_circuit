#! ../../../bin/nci -c     # run interp only
#
#  script to convert Neuromantic files to standard anatomy format for Neuron-C 
#
# x,y scale is 1024 for 260 um, or about 0.25;
# z scale is 1 um
#
# Neuromantic format: n T x y z R P
#
# n is an integer label that identifies the current point and 
#  increments by one from one line to the next.
#
# T is an integer representing the type of neuronal segment, 
#    such as soma, axon, apical dendrite, etc. 
#
#  0 = undefined
#  1 = soma
#  2 = axon
#  3 = dendrite
#  4 = apical dendrite
#  5 = fork point
#  6 = end point
#  7 = custom
#
#   x, y, z gives the cartesian coordinates of each node.
#
#   R is the radius at that node.
#
#   P indicates the parent (the integer label) of the current point or -1 
#      to indicate an origin (soma). 
#

par = 0;
dia = 0;
reg = "DEND";
dend = 0;
first = 1;

diascale = 1.0;
xscale   = 1.0;
yscale   = 1.0;
zscale   = 1.0;
xyscale  = 0;
xyzscale = 0;

nparm = setvar();		/* get parameters from command line */

if (xyzscale > 0) { xscale *= xyzscale; yscale *= xyzscale; zscale *= xyzscale; };
if (xyscale > 0)  { xscale  *= xyscale;  yscale *= xyscale; };

printf ("#   node  parent    dia       xbio       ybio      zbio      region   dendr\n#\n");

for (i=1; i<argc && strstr (argv[i],"--") >= 0; i+=2) {   /* skip over "--param xx", find file name */
	if (i>=argc-2) {print "Neuroman2nc: no .swc file name"; exit;};
}; 

fd = fopen (argv[i],"r");
dim Fld[] = {{"x"}};
for (flds=0; Fld = getflds(fd), flds=sizeof(Fld) > 0; flds=flds) {

    if (Fld[1] != "#") {
	n = atof(Fld[1]) - 1;
	par = atof(Fld[7]) - 1;
	dia = atof(Fld[6]) * diascale;
	x = atof(Fld[3]) * xscale;
	y = atof(Fld[4]) * yscale;
	z = atof(Fld[5]) * zscale;

	if (par < 0) { par = n; reg = "SOMA"; }
	else if (atof(Fld[2]) == 1) { reg = "SOMA"; }
	else if (atof(Fld[2]) == 2) { reg = "AXON"; }
	else { reg = "DEND"; };

	if (first == 1) {
	    first = 0;
	    xs = x;
	    ys = y;
	    zs = z;
	};
	printf ("  %4g     %4g     %-7.4g   %-8.4g   %-8.4g  %-5.3g     ",
				n, par, dia, x - xs, y - ys, z - zs);
	printf ("%s      %g\n", reg, dend);
    };
};

